# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: ['AlexTemp']
  pull_request:
    branches: ['AlexTemp']

jobs:
  deployment:
    environment: 'Production'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      - name: Publish
        run: dotnet publish CookWithWhat.API/CookWithWhat.API.csproj --configuration Release --runtime linux-x64 --self-contained --output ./out

      # Create the EC2 instance:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2  # Replace with your desired region
    
      - name: Check if EC2 instance exists
        id: check_ec2
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=YourInstanceName" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[?State.Name=='running'].InstanceId" --output text)
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      
      - name: Create EC2 instance if not exists
        if: steps.check_ec2.outputs.instance_id == ''
        id: create_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-xxxxxxxx \
              --instance-type t2.micro \
              --key-name YourKeyPairName \
              --security-group-ids sg-xxxxxxxx \
              --subnet-id subnet-xxxxxxxx \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=YourInstanceName}]' \
              --query 'Instances[0].InstanceId' \
              --output text)
          echo "Created new EC2 instance with ID: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
      
      - name: Set instance ID
        id: set_instance
        run: |
          INSTANCE_ID=${{ steps.check_ec2.outputs.instance_id || steps.create_ec2.outputs.instance_id }}
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for instance to be running
        run: aws ec2 wait instance-running --instance-ids ${{ steps.set_instance.outputs.instance_id }}
      
      - name: Get public IP address
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids ${{ steps.set_instance.outputs.instance_id }} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Copy to the EC2 instance
        uses: appleboy/scp-action@master
        with:
          host: ${{ steps.get_ip.outputs.public_ip }}
          username: ec2-user
          key: ${{ secrets.SSH_KEY }}
          source: './*'
          target: '/home/ec2-user/app'